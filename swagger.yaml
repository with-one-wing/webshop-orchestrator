swagger: "2.0"
info:
  description: "My Shop"
  version: "1.0.0"
  title: "Swagger Shop"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/"
tags:
  - name: "User"
    description: "Auth, sign uo e.t.c"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "Orders"
    description: "Access to orders"
  - name: "Products"
    description: "Operations about products"
schemes:
  - "http"
paths:
  /user/signup:
    post:
      tags:
        - "User"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        409:
          description: "User exists"
  /user/login:
    post:
      tags:
        - "User"
      summary: "Login user"
      description: ""
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        401:
          description: "Login or password is invalid"
  /user/{userId}:
    delete:
      tags:
        - "User"
      summary: "Delete purchase user by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        401:
          description: "Unauthorized or token was expired"
        404:
          description: "User not found"
        500:
          description: "Server error"
  /orders:
    post:
      tags:
        - "Orders"
      summary: "Place an order"
      description: ""
      operationId: "createOrder"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing"
          required: true
          schema:
            $ref: "#/definitions/Order"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "Product Not Found"
    get:
      tags:
        - "Orders"
      summary: "Find order List"
      operationId: "getOrderList"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
  /orders/{orderId}:
    get:
      tags:
        - "Orders"
      summary: "Find order by ID"
      operationId: "getOrderById"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of order that needs to be fetched"
          required: true
          type: "string"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
        - "Orders"
      summary: "Delete purchase order by ID"
      operationId: "deleteOrder"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "string"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        401:
          description: "Unauthorized or token was expired"
        404:
          description: "User not found"
        500:
          description: "Server error"
  /products:
    post:
      tags:
        - "Products"
      summary: "Create a product with form data"
      description: ""
      operationId: "createProduct"
      consumes:
        - "application/x-www-form-urlencoded"
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "formData"
          description: "Name of product"
          required: true
          type: "string"
        - name: "price"
          in: "formData"
          description: "Price of the product"
          required: true
          type: "string"
        - name: "productImage"
          in: "formData"
          description: "Updated status of the pet"
          required: true
          type: "file"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    get:
      tags:
        - "Products"
      summary: "Find product List"
      operationId: "getProductList"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
  /products/{productId}:
    get:
      tags:
        - "Products"
      summary: "Find order by ID"
      operationId: "getProductById"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of order that needs to be fetched"
          required: true
          type: "string"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
        - "Products"
      summary: "Delete purchase product by ID"
      operationId: "deleteProduct"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product that needs to be deleted"
          required: true
          type: "string"
        - name: "Authorization"
          in: "header"
          description: "ID of the user that needs to be deleted"
          required: true
          type: "string"
      responses:
        401:
          description: "Unauthorized or token was expired"
        404:
          description: "Product not found"
        500:
          description: "Server error"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      productId:
        type: "string"
        example: "5c422e43d04db43c2c8c10c3"
      quantity:
        type: "integer"
        format: "int64"
        example: "1"
  Product:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "integer"
        format: "int64"
    xml:
      name: "Tag"
  User:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
        example: "user@mail.com"
      password:
        type: "string"
        example: "mysecurepassword"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"